buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.0-SNAPSHOT'
    }
}

apply plugin: 'forge'

configurations {
    bundledLibs
    compile {
        extendsFrom bundledLibs
    }
}

dependencies {
    bundledLibs 'org.javassist:javassist:3.18.1-GA'
    bundledLibs 'com.github.stephenc.high-scale-lib:high-scale-lib:1.1.4'
    bundledLibs 'org.codehaus.jackson:jackson-core-lgpl:1.9.13'
    bundledLibs 'org.codehaus.jackson:jackson-mapper-lgpl:1.9.13'
}

sourceCompatibility = JavaVersion.VERSION_1_6
version = "1.6.4.${System.env.BUILD_NUMBER}"
group = "nallar.tickthreading" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "TickThreading"

minecraft {
    version = "1.6.4-9.11.1.964"
    assetDir = "eclipse/assets"
}

compileJava {
    // Kills the warnings about using the sun.* classes
    options.compilerArgs << '-XDignore.symbol.file'
    // Show warnings for deprecation and bad generics use
    options.compilerArgs << "-Xlint:deprecation"
    options.fork = true
    options.forkOptions.executable = 'javac'
}

sourceSets {
    main {
        java {
            resources {
                srcDir file('./build/unpacked/mappings')
            }
        }
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) { exclude 'mcmod.info' }
}

jar {
    from(configurations.bundledLibs.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "META-INF/**"
    }

    from './build/unpacked/conf/packaged.srg'
    from './generated/extendsMap.obj'

    manifest {
        attributes 'Implementation-Title': 'TickThreading', 'Implementation-Version': version
        attributes 'Main-Class': "nallar.tickthreading.patcher.PatchLauncher"
    }
}

def prepatchInputs = {
    // Prepatching must run if either patch code is updated,
    // or the prepatching code is updated.
    inputs.dir file("src/main/java/nallar/patched")
    inputs.dir file("buildSrc/src")
}
applyBinPatches prepatchInputs
deobfuscateJar prepatchInputs
deobfBinJar prepatchInputs

project.tasks.deobfBinJar.setDirty()  // just added this. run with --refresh-dependencies

import nallar.nmsprepatcher.Main;

// used later to call the main stuff.

afterEvaluate {
    applyBinPatches prepatchInputs
    deobfuscateJar prepatchInputs
    deobfBinJar prepatchInputs
    decompile prepatchInputs
    addFmlSources prepatchInputs
    doForgePatches prepatchInputs
    Main.loadPatches(file("src/main/java/nallar/patched"))
    project.tasks.deobfBinJar.doLast { task ->
        Main.editJar(task.getOutDirtyJar(), false)
    }
    project.tasks.doForgePatches.doLast { task ->
        Main.editJar(task.getOutJar(), true)
    }
}
