buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.0-SNAPSHOT'
    }
}

apply plugin: 'forge'

sourceCompatibility = JavaVersion.VERSION_1_6
version = "1.6.4.${System.env.BUILD_NUMBER}"
group= "nallar.tickthreading" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "TickThreading"

minecraft {
    version = "1.6.4-9.11.1.964"
    assetDir = "eclipse/assets"
}

processResources
        {
            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'version':project.version, 'mcversion':project.minecraft.version
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }

// binary ASM stuff
/*
task injectASM(type: Zip) {
    // just gonna edit the jar in-place
    from deobfBinJar.project.tasks.deobfBinJar.getOutDirtyJar()

    // deobfBinJar is the task that deobfuscates the jar after its been binPatched
    // we want the same output so whatever depends on this file still works.
    archivePath = project.tasks.deobfBinJar.getOutDirtyJar()

    eachFile { details -> // http://www.gradle.org/docs/current/javadoc/org/gradle/api/file/FileCopyDetails.html
        if (details.isDirectory())
            return; // skip  yes, return. This is a closure, not a loop.
        String path = details.getRelativePath()
        byte[] bytes = details.file.bytes

        // have fun

        details.file.bytes = bytes;
    }

    dependsOn "deobfBinJar"
}

// make sure this happens, since IIRC deobfBinJar is the last task in the process
project.tasks.setupCIWorkspace.dependsOn "injectAsm"
project.tasks.setupDevWorkspace.dependsOn "injectAsm"

// Source stuff

project.tasks.extractMinecraftSrc.doLast { task -> // yes, we are just tacking on functionality to the task.
    String rootPath = task.destinationDir.getCanonicalPath()
    task.destinationDir.eachFileRecurse(FileType.FILES) { file ->
        String relPath = file.getCanonicalPath().subString(rootPath.length() + 1)
        String text = file.text

        // have fun

        file.text = text
    }
}
*/