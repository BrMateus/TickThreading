<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<mods>
	<minecraftCommon>
		<class id="net.minecraft.world.SpawnerAnimals">
			<synchronize>findChunksForSpawning</synchronize>
		</class>
		<class id="net.minecraft.pathfinding.Path">
			<newInitializer field="pathPoints" class="net.minecraft.pathfinding.PathPoint" arraySize="128"/>
		</class>
		<class id="net.minecraft.server.MinecraftServer">
			<addAll fromClass="me.nallar.tickthreading.minecraft.patched.PatchMinecraftServer"/>
			<public field="mcServer"/>
		</class>
		<class id="net.minecraft.profiler.Profiler">
			<addAll fromClass="me.nallar.tickthreading.minecraft.patched.PatchProfiler"/>
		</class>
		<class id="net.minecraft.network.packet.Packet51MapChunk">
			<volatile field="chunkData"/>
		</class>
		<class id="net.minecraft.network.packet.Packet56MapChunks">
			<volatile field="field_73587_e"/>
		</class>
		<class id="net.minecraft.world.WorldServer">
			<!-- Fixes an issue where the tickNextTickLists would become out of sync -->
			<synchronize>func_82740_a,scheduleBlockUpdateFromLoad,getPendingBlockUpdates,addBlockEvent</synchronize>
			<addAll fromClass="me.nallar.tickthreading.minecraft.patched.PatchWorldServer"/>
			<insertSuper>tickBlocksAndAmbiance</insertSuper>
			<newInitializer field="doneChunks" code="java.util.Collections.newSetFromMap(new java.util.concurrent.ConcurrentHashMap());"/>
		</class>
		<class id="net.minecraft.world.World">
			<!-- addedEntityList could be added to while looping -->
			<newField field="TELock" class="java.lang.Object"/>
			<synchronize field="TELock">addTileEntity(Ljava/util/Collection;)V,setBlockTileEntity,addTileEntity(Lany;)V,getBlockTileEntity</synchronize>
			<!-- Same list was used by multiple threads -->
			<addAll fromClass="me.nallar.tickthreading.minecraft.patched.PatchWorld"/>
			<public>releaseEntitySkin</public>
			<newInitializer field="activeChunkSet" code="java.util.Collections.newSetFromMap(new java.util.concurrent.ConcurrentHashMap());"/>
		</class>
		<class id="net.minecraft.world.gen.ChunkProviderServer">
			<synchronize field="currentServer.TELock">safeLoadChunk,loadChunk,unload100OldestChunks,unloadAllChunks</synchronize>
		</class>
		<class id="net.minecraft.world.chunk.Chunk">
			<!-- The entity list could be accessed from multiple threads, as usual causes problems during iteration -->
			<newField field="entityListReadWriteLock" class="me.nallar.tickthreading.util.TwoWayReentrantReadWriteLock"/>
			<newField field="entityListWriteLock" class="java.util.concurrent.locks.Lock" code="this.entityListReadWriteLock.writeLock();"/>
			<newField field="entityListReadLock" class="java.util.concurrent.locks.Lock" code="this.entityListReadWriteLock.readLock();"/>
			<lock field="entityListWriteLock">onChunkLoad,onChunkUnload,removeEntityAtIndex,addEntity</lock>
			<lock field="entityListReadLock">getEntitiesWithinAABBForEntity,getEntitiesOfTypeWithinAAAB</lock>
		</class>
		<class id="net.minecraft.util.Vec3Pool">
			<!-- This prevents entities in multiple threads using the same Vec3 for collisions. -->
			<synchronize>getVecFromPool</synchronize>
		</class>
		<class id="net.minecraft.util.AxisAlignedBB">
			<!-- Improves performance -->
			<replaceMethod fromClass="me.nallar.tickthreading.minecraft.patched.PatchAxisAlignedBB">intersectsWith</replaceMethod>
		</class>
		<!--
		<class id="net.minecraft.util.AABBPool">
			Prevent multiple threads accessing the same AABB
			Probably not necessary due to pool, unless MC devs messed up.
			<synchronize>addOrModifyAABBInPool</synchronize>
		</class>
		-->
		<class id="net.minecraft.util.LongHashMap">
			<replace class="me.nallar.tickthreading.minecraft.patched.LongHashMap"/>
		</class>
		<class id="net.minecraft.util.IntHashMap">
			<replace class="me.nallar.tickthreading.minecraft.patched.IntHashMap"/>
		</class>
		<class id="net.minecraft.entity.player.EntityPlayerMP">
			<!-- TODO: Fix this with less locking -->
			<newField field="staticLock" class="java.lang.Object" static=""/>
			<synchronize field="staticLock">onUpdate</synchronize>
			<!-- Concurrent access during iteration = boom -->
			<newInitializer field="destroyedItemsNetCache" class="me.nallar.tickthreading.collections.ConcurrentLinkedQueueList"/>
		</class>
		<class id="net.minecraft.entity.Entity">
			<newField static="" field="nextEntityID_" class="java.util.concurrent.atomic.AtomicInteger"/>
			<insertAfter field="entityId" code="this.$field = this.nextEntityID_.getAndIncrement();"/>
		</class>
		<class id="net.minecraft.tileentity.TileEntity">
			<setBody code="return super.toString() + &quot; x,y,x: &quot; + xCoord + &quot;, &quot; + yCoord + &quot;, &quot; + zCoord;">toString</setBody>
		</class>
		<class id="net.minecraft.entity.EntityTracker">
			<!-- Yet more comodification exceptions -->
			<newField field="readWriteLock" class="me.nallar.tickthreading.util.TwoWayReentrantReadWriteLock"/>
			<newField field="writeLock" class="java.util.concurrent.locks.Lock" code="this.readWriteLock.writeLock();"/>
			<newField field="readLock" class="java.util.concurrent.locks.Lock" code="this.readWriteLock.readLock();"/>
			<lock field="writeLock">addEntityToTracker(Lnet/minecraft/entity/Entity;)V,addEntityToTracker(Lnet/minecraft/entity/Entity;IIZ)V,removeEntityFromAllTrackingPlayers</lock>
			<lock field="readLock">updateTrackedEntities,removeAllTrackingPlayers,func_85172_a</lock>
		</class>
		<class id="net.minecraft.village.VillageCollection">
			<!-- Literally the most useless collection. Locking instead of voiding in case it ever does something useful in future -->
			<newField field="readWriteLock" class="me.nallar.tickthreading.util.TwoWayReentrantReadWriteLock"/>
			<newField field="writeLock" class="java.util.concurrent.locks.Lock" code="this.readWriteLock.writeLock();"/>
			<newField field="readLock" class="java.util.concurrent.locks.Lock" code="this.readWriteLock.readLock();"/>
			<lock field="writeLock">addVillagerPosition</lock>
			<lock field="readLock">findNearestVillage,func_82566_a</lock>
		</class>
		<class id="net.minecraft.server.management.PlayerManager">
			<synchronize>addPlayer,removePlayer</synchronize>
		</class>
		<class id="net.minecraft.world.ChunkCoordIntPair">
			<addAll fromClass="me.nallar.tickthreading.minecraft.patched.PatchChunkCoordIntPair"/>
		</class>
		<class id="net.minecraft.crash.CrashReportCategory">
			<addAll fromClass="me.nallar.tickthreading.minecraft.patched.PatchClassReportCategory"/>
		</class>
	</minecraftCommon>
	<forgeModLoader>
		<class id="cpw.mods.fml.common.FMLModContainer">
			<replaceFieldUsage field="fingerprintNotPresent" readCode="$_ = false;">constructMod</replaceFieldUsage>
		</class>
		<class id="cpw.mods.fml.common.FMLCommonHandler">
			<addAll fromClass="me.nallar.tickthreading.minecraft.patched.PatchFMLCommonHandler"/>
		</class>
		<class id="cpw.mods.fml.common.SingleIntervalHandler">
			<addAll fromClass="me.nallar.tickthreading.minecraft.patched.PatchSingleIntervalHandler"/>
		</class>
		<class id="cpw.mods.fml.relauncher.RelaunchClassLoader">
			<addAll fromClass="me.nallar.tickthreading.minecraft.patched.PatchRelaunchClassLoader"/>
		</class>
	</forgeModLoader>
	<factorization>
		<class id="factorization.common.TileEntityWrathLamp">
			<!-- ಠ_ಠ -->
			<synchronize>findLightAirParent</synchronize>
		</class>
	</factorization>
	<liteLoader>
		<class id="com.mumfrey.liteloader.core.HookProfiler">
			<!-- LiteLoader makes the profiler not threadsafe - I may look into patching this better in future, but TT isn't really intended for clients -->
			<synchronize>a(Ljava/lang/String;)V,b()V</synchronize>
		</class>
	</liteLoader>
	<!-- Might not be needed
	<buildCraftAPI>
		<class id="buildcraft.api.power.PowerProvider">
			<volatile/>
			<synchronize/>
		</class>
	</buildCraftAPI>
	-->
	<buildCraftTransport>
		<class id="buildcraft.transport.TileGenericPipe">
			<newField field="staticLock" class="java.lang.Object" static=""/>
			<synchronize field="staticLock">initialize</synchronize>
			<synchronize field="facadeBlocks">blockCreated,getBlockId,getTile,computeConnections</synchronize>
		</class>
		<class id="buildcraft.transport.PipeTransportItems">
			<!--
			<synchronize field="travelingEntities">moveSolids,entityEntering</synchronize>
			-->
			<newInitializer field="travelingEntities" class="java.util.concurrent.ConcurrentHashMap"/>
		</class>
	</buildCraftTransport>
	<thermalExpansionTransport>
		<class id="thermalexpansion.transport.tileentity.TileConduitEnergy">
			<newField field="tickLock" class="java.lang.Object" static=""/>
			<synchronize field="tickLock">updateGridIfNull</synchronize>
		</class>
		<class id="thermalexpansion.transport.tileentity.TileConduitLiquid">
			<newField field="tickLock" class="java.lang.Object" static=""/>
			<synchronize field="tickLock">updateGridIfNull</synchronize>
		</class>
	</thermalExpansionTransport>
	<redPowerCore>
		<class id="com.eloraam.redpower.core.RedPowerLib">
			<threadLocal field="blockUpdates" type="java.util.HashSet" threadLocalField="javassist.is.faulty.ThreadLocals.redPowerBlockUpdateSet"/>
			<threadLocal field="powerSearchTest" type="java.util.HashSet" threadLocalField="javassist.is.faulty.ThreadLocals.redPowerPowerSearchTest"/>
			<threadLocal field="powerSearch" type="java.util.LinkedList" threadLocalField="javassist.is.faulty.ThreadLocals.redPowerPowerSearch"/>
			<!-- Still broken - crashes JVM!
			<threadLocal field="searching" type="boolean" setExpression="java.lang.Boolean.valueOf($1)" threadLocalField="javassist.is.faulty.ThreadLocals.redPowerIsSearching"/>
			-->
		</class>
		<class id="com.eloraam.redpower.core.TubeFlow">
			<synchronize>update,add</synchronize>
		</class>
	</redPowerCore>
	<industrialCraft>
		<class id="ic2.core.EnergyNet">
			<newInitializer field="energySourceToEnergyPathMap" code="java.util.Collections.synchronizedMap(new java.util.WeakHashMap&lt;Class, Object&gt;());"/>
			<newInitializer field="entityLivingToShockEnergyMap" code="java.util.Collections.synchronizedMap(new java.util.WeakHashMap&lt;Class, Object&gt;());"/>
			<newField field="readWriteLock" class="me.nallar.tickthreading.util.TwoWayReentrantReadWriteLock"/>
			<newField field="writeLock" class="java.util.concurrent.locks.Lock" code="this.readWriteLock.writeLock();"/>
			<newField field="readLock" class="java.util.concurrent.locks.Lock" code="this.readWriteLock.readLock();"/>
			<lock field="writeLock">addTileEntity,removeTileEntity</lock>
			<lock field="readLock">emitEnergyFrom</lock>
		</class>
	</industrialCraft>
	<!--
	This does not appear to be needed.
	<stevesCarts>
		<class id="vswe.stevescarts.Carts.entMCBase">
			<newField field="staticLock" class="java.lang.Object" static=""/>
			<synchronize field="staticLock">doUpdate,getCon</synchronize>
			<synchronize>addModuleClass,d,k_</synchronize>
		</class>
		<class id="vswe.stevescarts.PacketHandler">
			<logExceptions>receivePacketAtCart</logExceptions>
		</class>
	</stevesCarts>
	-->
	<gregTech>
		<class id="gregtechmod.GT_Mod">
			<synchronize>readIDSUData,writeIDSUData</synchronize>
		</class>
	</gregTech>
	<chickenChunks>
		<class id="codechicken.chunkloader.ChunkLoaderEventHandler">
			<synchronize>tickEnd,onPlayerLogout,onWorldLoad,onWorldUnload,onChunkForce,onChunkUnForce</synchronize>
		</class>
	</chickenChunks>
</mods>
