<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<mods>
	<tickthreading>
		<class id="me.nallar.tickthreading.minecraft.tickregion.TileEntityTickRegion">
			<lockToSynchronized>doTick</lockToSynchronized>
		</class>
		<class id="me.nallar.tickthreading.minecraft.TickManager">
			<lockToSynchronized>unlock,lock</lockToSynchronized>
		</class>
	</tickthreading>
	<minecraftCommon>
		<class id="net.minecraft.world.SpawnerAnimals" env="forge">
			<addAll fromClass="me.nallar.patched.PatchSpawnerAnimalsForge"/>
		</class>
		<class id="net.minecraft.world.SpawnerAnimals" env="mcpc">
			<synchronize>findChunksForSpawning</synchronize>
		</class>
		<class id="net.minecraft.world.SpawnerAnimals">
			<addAll fromClass="me.nallar.patched.PatchSpawnerAnimals"/>
			<profile>findChunksForSpawning</profile>
		</class>
		<class id="net.minecraft.pathfinding.Path">
			<newInitializer field="pathPoints" class="net.minecraft.pathfinding.PathPoint" arraySize="128"/>
		</class>
		<class id="net.minecraft.server.MinecraftServer">
			<addAll fromClass="me.nallar.patched.server.PatchMinecraftServer"/>
			<public field="mcServer"/>
			<volatile field="serverRunning"/>
			<volatile field="serverIsRunning"/>
		</class>
		<class id="net.minecraft.server.MinecraftServer" env="mcpc">
			<replaceMethod code="{
					this.server.getScheduler().mainThreadHeartbeat(this.w);

					while (!processQueue.isEmpty()) {
							((Runnable) processQueue.remove()).run();
					}
					}">spigotTLETick
			</replaceMethod>
		</class>
		<class id="net.minecraft.server.MinecraftServer" env="forge">
			<addAll fromClass="me.nallar.patched.server.PatchMinecraftServerForge"/>
		</class>
		<class id="net.minecraft.profiler.Profiler">
			<addAll fromClass="me.nallar.patched.PatchProfiler"/>
		</class>
		<class id="net.minecraft.network.NetServerHandler">
			<addAll fromClass="me.nallar.patched.network.PatchNetServerHandler"/>
			<replaceMethodCall method="warning"
												 code="{ javassist.is.faulty.Redirects.notifyAdmins($1); }"
							>handleFlying
			</replaceMethodCall>
			<insertBefore code="if (javassist.is.faulty.Redirects.interceptPacket($1, this)) { return; }">sendPacketToPlayer</insertBefore>
		</class>
		<class id="net.minecraft.network.NetServerHandler" env="mcpc">
			<insertAfter code="handleTeleport($1.getX(), $1.getY(), $1.getZ());">teleport</insertAfter>
			<synchronize>teleport</synchronize>
		</class>
		<class id="net.minecraft.network.NetServerHandler" env="forge">
			<insertAfter code="handleTeleport($1, $2, $3);">setPlayerLocation</insertAfter>
			<synchronize>setPlayerLocation</synchronize>
		</class>
		<class id="net.minecraft.network.packet.Packet10Flying">
			<addAll fromClass="me.nallar.patched.network.PatchPacket10Flying"/>
		</class>
		<class id="net.minecraft.network.packet.Packet14BlockDig">
			<addAll fromClass="me.nallar.patched.network.PatchPacketAsync"/>
		</class>
		<class id="net.minecraft.network.packet.Packet51MapChunk">
			<volatile field="chunkData"/>
			<addAll fromClass="me.nallar.patched.network.PatchPacket51MapChunk"/>
			<threadLocal field="temp" type="byte[]" threadLocalField="javassist.is.faulty.ThreadLocals.mapChunkTempByteArray">getMapChunkData</threadLocal>
			<synchronize field="$1">getMapChunkData</synchronize>
		</class>
		<class id="net.minecraft.network.packet.Packet56MapChunks">
			<volatile field="chunkDataBuffer"/>
		</class>
		<class id="net.minecraft.network.packet.Packet254ServerPing">
			<addAll fromClass="me.nallar.patched.network.PatchPacketAsync"/>
		</class>
		<class id="net.minecraft.network.NetworkListenThread">
			<synchronize>addPlayer,networkTick</synchronize>
			<profile>networkTick</profile>
			<replaceMethodCall code="{ $_ = null; }" method="log" index="1">networkTick</replaceMethodCall>
		</class>
		<class id="net.minecraft.network.TcpWriterThread">
			<ignoreExceptions type="java.net.SocketException">run</ignoreExceptions>
		</class>
		<class id="net.minecraft.world.World">
			<addAll fromClass="me.nallar.patched.world.PatchWorld"/>
			<profile>updateEntities</profile>
			<profile>setActivePlayerChunksAndCheckLight</profile>
			<public>releaseEntitySkin</public>
			<final field="worldAccesses"/>
			<final field="provider"/>
			<final field="theProfiler"/>
			<final field="playerEntities"/>
			<final field="isRemote"/>
			<public field="ambientTickCountdown"/>
			<public field="forcedChunks"/>
			<replaceInitializer field="playerEntities" class="java.util.concurrent.CopyOnWriteArrayList"/>
		</class>
		<class id="net.minecraft.world.ChunkCache">
			<replaceMethodCall code="$_ = $0.getChunkIfExists($$);" method="^class:World^.^method:World/getChunkFromChunkCoords^"/>
		</class>
		<class id="net.minecraft.world.NextTickListEntry">
			<newField static="" field="nextEntryID_" class="java.util.concurrent.atomic.AtomicLong"/>
			<insertAfter field="tickEntryID" code="this.$field = this.nextEntryID_.getAndIncrement();"/>
		</class>
		<class id="net.minecraft.world.WorldServer">
			<addAll fromClass="me.nallar.patched.world.PatchWorldServer"/>
			<profile>tickBlocksAndAmbiance</profile>
			<profile>tick</profile>
			<insertSuper>initialize</insertSuper>
			<synchronize>addBlockEvent,sendAndApplyBlockEvents</synchronize>
		</class>
		<class id="net.minecraft.world.biome.BiomeDecorator">
			<synchronize>decorate(Lnet/minecraft/world/World;Ljava/util/Random;II)V</synchronize>
		</class>
		<class id="net.minecraft.world.biome.WorldChunkManager">
			<newField field="staticLock" class="java.lang.Object" static=""/>
			<synchronize field="staticLock">getModdedBiomeGenerators</synchronize>
		</class>
		<class id="net.minecraft.world.biome.BiomeCache">
			<synchronize>getBiomeCacheBlock,cleanupCache</synchronize>
		</class>
		<class id="net.minecraft.world.gen.layer.IntCache">
			<replace class="me.nallar.patched.storage.IntCache"/>
		</class>
		<class id="net.minecraft.world.gen.structure.MapGenStructure">
			<replaceInitializer field="structureMap" class="java.util.concurrent.ConcurrentHashMap"/>
		</class>
		<class id="net.minecraft.world.gen.ChunkProviderServer">
			<replace class="me.nallar.patched.storage.ThreadedChunkProvider"/>
		</class>
		<class id="net.minecraft.world.gen.ChunkProviderServer" env="mcpc">
			<replaceMethod code="{
				world.getServer().getPluginManager().callEvent(new org.bukkit.event.world.ChunkLoadEvent($1.bukkitChunk, $2));
			}
			">fireBukkitLoadEvent
			</replaceMethod>
			<replaceMethod code="{
				world.getServer().getPluginManager().callEvent(new org.bukkit.event.world.ChunkPopulateEvent($1.bukkitChunk));
			}
			">fireBukkitPopulateEvent
			</replaceMethod>
			<replaceMethod code="{
				org.bukkit.event.world.ChunkUnloadEvent event = new org.bukkit.event.world.ChunkUnloadEvent($1.bukkitChunk);
        world.getServer().getPluginManager().callEvent(event);

        return !event.isCancelled();
			}
			">fireBukkitUnloadEvent
			</replaceMethod>
		</class>
		<class id="org.bukkit.craftbukkit.v1_4_R1.chunkio.ChunkIOExecutor" env="mcpc">
			<replaceInitializer field="instance" code="$_ = null;"/>
			<replaceMethod code="throw new UnsupportedOperationException();">tick</replaceMethod>
			<disable>adjustPoolSize</disable>
			<replaceMethod code="((^class:ChunkProviderServer^)$1.^method:World/getChunkProvider^()).getChunkAt($2, $3, true, false, null);">waitForChunkLoad</replaceMethod>
			<replaceMethod code="$3.getChunkAt($4, $5, true, false, $6);">queueChunkLoad</replaceMethod>
		</class>
		<class id="net.minecraft.world.gen.ChunkProviderServer" env="mcpc">
			<changeFieldType field="chunksToUnload" type="org.bukkit.craftbukkit.v1_4_R1.util.LongHashSet" remove="true"/>
			<insertAfter field="chunksToUnload" code="$field = new org.bukkit.craftbukkit.v1_4_R1.util.LongHashSet();"/>
		</class>
		<class id="net.minecraft.world.chunk.NibbleArray" env="forge">
			<addAll fromClass="me.nallar.patched.storage.PatchNibbleArrayForge"/>
		</class>
		<class id="net.minecraft.world.chunk.storage.RegionFileCache">
			<replaceMethod code="throw new UnsupportedOperationException();">createOrLoadRegionFile</replaceMethod>
		</class>
		<class id="net.minecraft.world.chunk.storage.AnvilChunkLoader">
			<replace class="me.nallar.patched.storage.ThreadedChunkLoader"/>
		</class>
		<class id="net.minecraft.world.chunk.storage.AnvilChunkLoaderPending">
			<addAll fromClass="me.nallar.patched.storage.PatchAnvilChunkLoaderPending"/>
		</class>
		<class id="net.minecraft.world.chunk.Chunk">
			<!-- The entity list could be accessed from multiple threads, as usual causes problems during iteration -->
			<addAll fromClass="me.nallar.patched.storage.PatchChunk"/>
			<final field="xPosition"/>
			<final field="zPosition"/>
			<final field="entityLists"/>
			<final field="worldObj"/>
			<volatile field="isTerrainPopulated"/>
			<lock field="entityListWriteLock">onChunkLoad,onChunkUnload,removeEntityAtIndex,addEntity</lock>
			<lock field="entityListReadLock">getEntitiesWithinAABBForEntity,getEntitiesOfTypeWithinAAAB</lock>
			<replaceInitializer field="chunkTileEntityMap" class="java.util.concurrent.ConcurrentHashMap"/>
			<!--
			Used to debug when mods are setting chunk.isModified when they shouldn't - for example, GregTech sets every chunk with a gregtech machine in as modified
			every tick. :(
			<replaceFieldUsage field="isModified" writeCode="$0.^field:Chunk/isModified^ = $1; if ($1 == true) { Thread.dumpStack(); }">^all^</replaceFieldUsage>
			-->
		</class>
		<class id="net.minecraft.world.chunk.EmptyChunk">
			<replaceMethod code="return 1;">getHeightValue</replaceMethod>
			<replaceMethod code="{ if ($2 == 0) { return 7; } return 0; }">getBlockID</replaceMethod>
		</class>
		<class id="net.minecraft.util.Vec3Pool">
			<!-- This prevents entities in multiple threads using the same Vec3 for collisions. -->
			<replace class="me.nallar.patched.PatchVec3Pool"/>
		</class>
		<class id="net.minecraft.util.AABBPool">
			<!-- This prevents entities in multiple threads using the same Vec3 for collisions. -->
			<replace class="me.nallar.patched.PatchAABBPool"/>
		</class>
		<class id="net.minecraft.util.AxisAlignedBB">
			<!-- Improves performance -->
			<addAll fromClass="me.nallar.patched.PatchAxisAlignedBB"/>
			<replaceInitializer field="theAABBLocalPool" code="$_ = null;">^static^</replaceInitializer>
		</class>
		<class id="net.minecraft.util.LongHashMap">
			<replace class="me.nallar.patched.collection.PatchLongHashMap"/>
		</class>
		<class id="net.minecraft.util.IntHashMap">
			<replace class="me.nallar.patched.collection.IntHashMap"/>
		</class>
		<class id="net.minecraft.entity.player.EntityPlayerMP">
			<addAll fromClass="me.nallar.patched.entity.PatchEntityPlayerMP"/>
			<!-- Concurrent access during iteration = boom -->
			<replaceInitializer field="destroyedItemsNetCache" class="me.nallar.tickthreading.collections.ConcurrentQueueList"/>
			<replaceInitializer field="loadedChunks" class="me.nallar.tickthreading.collections.ConcurrentQueueList"/>
		</class>
		<class id="net.minecraft.entity.player.EntityPlayerMP">
			<addAll fromClass="me.nallar.patched.entity.PatchEntityPlayerMPForge"/>
		</class>
		<class id="net.minecraft.entity.Entity">
			<addAll fromClass="me.nallar.patched.entity.PatchEntity"/>
		</class>
		<class id="net.minecraft.nbt.CompressedStreamTools">
			<addAll fromClass="me.nallar.patched.nbt.PatchCompressedStreamTools"/>
		</class>
		<class id="net.minecraft.nbt.NBTTagCompound">
			<addAll fromClass="me.nallar.patched.nbt.PatchNBTTagCompound"/>
			<replaceInitializer field="tagMap" class="java.util.concurrent.ConcurrentHashMap"/>
			<final field="tagMap"/>
		</class>
		<class id="net.minecraft.entity.Entity">
			<final field="rand"/>
			<newField static="" field="nextEntityID_" class="java.util.concurrent.atomic.AtomicInteger"/>
			<insertAfter field="entityId" code="this.$field = this.nextEntityID_.getAndIncrement();"/>
			<insertBefore code="if ($1 == 0 &amp;&amp; $2 == 0 &amp;&amp; $3 == 0) { return; }">moveEntity</insertBefore>
		</class>
		<class id="net.minecraft.entity.EntityLiving">
			<addAll fromClass="me.nallar.patched.entity.PatchEntityLiving"/>
		</class>
		<class id="net.minecraft.entity.item.EntityItem">
			<addAll fromClass="me.nallar.patched.entity.PatchEntityItem"/>
			<insertSuper>onUpdate</insertSuper>
		</class>
		<class id="net.minecraft.tileentity.TileEntity">
			<addAll fromClass="me.nallar.patched.PatchTileEntity"/>
		</class>
		<class id="net.minecraft.entity.EntityTracker">
			<!-- Yet more comodification exceptions -->
			<addAll fromClass="me.nallar.patched.entity.PatchEntityTracker"/>
			<newField field="readWriteLock" class="me.nallar.tickthreading.util.concurrent.TwoWayReentrantReadWriteLock"/>
			<newField field="writeLock" class="java.util.concurrent.locks.Lock" code="this.readWriteLock.writeLock();"/>
			<newField field="readLock" class="java.util.concurrent.locks.Lock" code="this.readWriteLock.readLock();"/>
			<lock field="writeLock">addEntityToTracker(Lnet/minecraft/entity/Entity;)V,addEntityToTracker(Lnet/minecraft/entity/Entity;IIZ)V,removeEntityFromAllTrackingPlayers</lock>
			<lock field="readLock">updateTrackedEntities,removeAllTrackingPlayers,func_85172_a</lock>
		</class>
		<class id="net.minecraft.village.Village">
			<addAll fromClass="me.nallar.patched.PatchVillage"/>
		</class>
		<class id="net.minecraft.village.VillageCollection">
			<addAll fromClass="me.nallar.patched.collection.PatchVillageCollection"/>
			<!-- Literally the most useless collection. Locking instead of voiding in case it ever does something useful in future -->
			<newField field="readWriteLock" class="me.nallar.tickthreading.util.concurrent.TwoWayReentrantReadWriteLock"/>
			<newField field="writeLock" class="java.util.concurrent.locks.Lock" code="this.readWriteLock.writeLock();"/>
			<newField field="readLock" class="java.util.concurrent.locks.Lock" code="this.readWriteLock.readLock();"/>
			<lock field="writeLock">addVillagerPosition</lock>
			<lock field="readLock">findNearestVillage,func_82566_a</lock>
		</class>
		<class id="net.minecraft.server.dedicated.DedicatedServerSleepThread">
			<disable>run</disable>
		</class>
		<class id="net.minecraft.server.management.ServerConfigurationManager">
			<newField field="readWriteLock" class="me.nallar.tickthreading.util.concurrent.TwoWayReentrantReadWriteLock"/>
			<newField field="playersUpdateLock" class="java.util.concurrent.locks.Lock" code="this.readWriteLock.writeLock();"/>
			<newField field="playerUpdateLock" class="java.util.concurrent.locks.Lock" code="this.readWriteLock.readLock();"/>
			<lock field="playerUpdateLock">createPlayerForUser,sendPacketToAllPlayers,sendPlayerInfoToAllPlayers</lock>
			<lock field="playerUpdateLock">sendPacketToAllPlayersInDimension,getPlayerListAsString,getAllUsernames,getPlayerForUsername,findPlayers,sendToAllNearExcept</lock>
			<lock field="playerUpdateLock">saveAllPlayerData,getPlayerList</lock>
			<replaceInitializer field="playerEntityList" class="me.nallar.tickthreading.collections.LockArrayList"/>
			<insertAfter code="((me.nallar.tickthreading.collections.LockArrayList)^field:ServerConfigurationManager/playerEntityList^).lock = playersUpdateLock;"/>
			<synchronize field="$1.loadedChunks">respawnPlayer</synchronize>
			<synchronize field="$1.loadedChunks">transferPlayerToDimension(Lnet.minecraft.entity.player.EntityPlayerMP;ILnet.minecraft.world.Teleporter;)V</synchronize>
			<synchronize field="$1.playerNetServerHandler">transferPlayerToDimension(Lnet.minecraft.entity.player.EntityPlayerMP;ILnet.minecraft.world.Teleporter;)V</synchronize>
		</class>
		<class id="net.minecraft.server.management.ServerConfigurationManager" env="forge">
			<addAll fromClass="me.nallar.patched.server.PatchServerConfigurationManagerForge"/>
		</class>
		<class id="net.minecraft.server.management.PlayerManager">
			<newField field="readWriteLock" class="java.util.concurrent.locks.ReentrantReadWriteLock"/>
			<newField field="playersUpdateLock" class="java.util.concurrent.locks.Lock" code="this.readWriteLock.writeLock();"/>
			<newField field="playerUpdateLock" class="java.util.concurrent.locks.Lock" code="this.readWriteLock.readLock();"/>
			<addAll fromClass="me.nallar.patched.world.tracking.PatchPlayerManager"/>
		</class>
		<class id="net.minecraft.server.management.PlayerManager" env="forge">
			<addAll fromClass="me.nallar.patched.world.tracking.PatchPlayerManagerForge"/>
		</class>
		<class id="net.minecraft.server.management.PlayerManager" env="mcpc">
			<lock field="playersUpdateLock">updatePlayerInstances</lock>
		</class>
		<class id="net.minecraft.server.management.PlayerManager">
			<replaceMethodCall method="sort" index="1" code="{ }">updateMountedMovingPlayer</replaceMethodCall>
			<synchronize field="$1.loadedChunks">addPlayer,removePlayer,filterChunkLoadQueue</synchronize>
			<synchronize field="$1.loadedChunks">updateMountedMovingPlayer</synchronize>
			<synchronize>addPlayer,removePlayer</synchronize>
			<profile>updatePlayerInstances</profile>
		</class>
		<class id="net.minecraft.server.management.PlayerInstance">
			<addAll fromClass="me.nallar.patched.world.tracking.PatchPlayerInstance"/>
			<insertBefore code="this.sendTiles();">sendChunkUpdate</insertBefore>
		</class>
		<class id="net.minecraft.server.management.PlayerInstance" env="forge">
			<addAll fromClass="me.nallar.patched.world.tracking.PatchPlayerInstanceForge"/>
			<lock field="myManager.playerUpdateLock">flagChunkForUpdate,sendChunkUpdate</lock>
			<replaceMethodCall index="1" code="{ $_ = null; }"/>
		</class>
		<class id="net.minecraft.server.management.PlayerInstance">
			<synchronize field="$1.loadedChunks">addPlayerToChunkWatchingList,sendThisChunkToPlayer</synchronize>
		</class>
		<class id="net.minecraft.world.ChunkCoordIntPair">
			<addAll fromClass="me.nallar.patched.storage.PatchChunkCoordIntPair"/>
			<public field="chunkXPos"/>
			<public field="chunkZPos"/>
			<noFinal field="chunkXPos"/>
			<noFinal field="chunkZPos"/>
		</class>
		<class id="net.minecraft.world.Teleporter">
			<replaceMethodCall newMethod="getTEWithLoad" method="^class:WorldServer^.^method:World/getBlockTileEntity^">^all^</replaceMethodCall>
			<replaceMethodCall newMethod="getBlockIdWithLoad" method="^class:WorldServer^.^method:World/getBlockId^">^all^</replaceMethodCall>
		</class>
		<class id="net.minecraft.crash.CrashReport">
			<addAll fromClass="me.nallar.patched.server.PatchCrashReport"/>
		</class>
		<class id="net.minecraft.block.BlockRedstoneTorch">
			<addAll fromClass="me.nallar.patched.block.PatchBlockRedstoneTorch"/>
		</class>
		<class id="net.minecraft.block.BlockRedstoneWire">
			<synchronize>calculateCurrentChanges,updateAndPropagateCurrentStrength</synchronize>
		</class>
		<class id="net.minecraft.block.BlockFlowing">
			<!-- TODO: Make this cleaner once it's possible to access method parameters while replacing a MethodCall expression -->
			<replaceMethodCall
							code="if (((org.bukkit.craftbukkit.v1_4_R1.CraftWorld) ((org.bukkit.event.block.BlockEvent) $1).getBlock().getWorld()).getHandle().safeToGenerate()) { $0.callEvent($$); }"
							method="callEvent">updateTick
			</replaceMethodCall>
		</class>
		<class id="net.minecraft.network.TcpConnection">
			<addAll fromClass="me.nallar.patched.network.PatchTcpConnection"/>
		</class>
		<class id="net.minecraft.network.TcpReaderThread">
			<replace class="me.nallar.patched.network.ReplaceTcpReaderThread"/>
		</class>
		<class id="net.minecraft.entity.ai.EntityAITasks">
			<synchronize>addTask,func_85156_a,onUpdateTasks,func_75775_b</synchronize>
		</class>
		<class id="net.minecraft.block.Block" env="mcpc">
			<threadLocalBoolean field="callingPlaceEvent" threadLocalField="$0.inPlaceEvent"/>
		</class>
		<class id="net.minecraft.world.World" env="mcpc">
			<insertBefore code="inPlaceEvent = new me.nallar.tickthreading.util.BooleanThreadLocal();"/>
			<final field="callingPlaceEvent"/>
			<threadLocalBoolean field="callingPlaceEvent" threadLocalField="$0.inPlaceEvent"/>
			<disable>loadChunkOnProvideBegin,loadChunkOnProvideEnd</disable>
		</class>
		<class id="net.minecraft.world.chunk.Chunk" env="mcpc">
			<threadLocalBoolean field="callingPlaceEvent" threadLocalField="$0.inPlaceEvent"/>
		</class>
		<class id="net.minecraft.item.ItemBlock" env="mcpc">
			<threadLocalBoolean field="callingPlaceEvent" threadLocalField="$0.inPlaceEvent"/>
		</class>
		<class id="net.minecraft.server.gui.GuiLogOutputHandler">
			<synchronize>publish</synchronize>
		</class>
	</minecraftCommon>
	<bukkit>
		<class id="org.bukkit.plugin.SimplePluginManager">
			<synchronize>subscribeToPermission,unsubscribeFromPermission,subscribeToDefaultPerms,unsubscribeFromDefaultPerms,getPermissionSubscriptions,getDefaultPermSubscriptions</synchronize>
		</class>
		<class id="org.bukkit.craftbukkit.v1_4_R1.CraftServer">
			<replaceMethodCall method="registerDimension" code="{ }">createWorld(Lorg.bukkit.WorldCreator;)Lorg.bukkit.World;</replaceMethodCall>
			<replaceMethodCall method="addMVDimension" code="{ }">createWorld(Lorg.bukkit.WorldCreator;)Lorg.bukkit.World;</replaceMethodCall>
			<ignoreExceptions code="System.err.println(&quot;Loading world failed&quot; + $e); $e.printStackTrace(); throw new java.lang.Error($e);">
				createWorld(Lorg.bukkit.WorldCreator;)Lorg.bukkit.World;
			</ignoreExceptions>
		</class>
		<class id="org.bukkit.craftbukkit.v1_4_R1.CraftWorld">
			<replaceMethod
							code=" {
							Object[] chunks = world.getChunks();
							org.bukkit.Chunk[] craftChunks = new org.bukkit.Chunk[chunks.length];
							for (int i = 0; i &lt; craftChunks.length; i++) {
								craftChunks[i] = ((zz) chunks[i]).bukkitChunk;
							}
							return craftChunks;
							} "
							>getLoadedChunks
			</replaceMethod>
			<replaceFieldUsage class="^class:World^" field="^field:World/loadedEntityList^" readCode="$_ = world.getEntities();">getLivingEntities,getEntities</replaceFieldUsage>
			<replaceMethod
							code=" {
								return world.^field:WorldServer/theChunkProviderServer^.getChunkAt($1, $2, $3, null) != null;
							} "
							>loadChunk(IIZ)Z
			</replaceMethod>
			<replaceMethod
							code=" {
								if ($4 &amp;&amp; isChunkInUse($1, $2)) {
										return false;
								}

								world.^field:WorldServer/theChunkProviderServer^.unloadChunkImmediately($1, $2, $3);

								return true;
							} "
							>unloadChunk(IIZZ)Z
			</replaceMethod>
			<replaceMethod
							code=" {
								world.^field:WorldServer/theChunkProviderServer^.regenerateChunk($1, $2);

								refreshChunk($1, $2);

								return true;
							} "
							>regenerateChunk
			</replaceMethod>
			<replaceMethod code="throw new UnsupportedOperationException(&quot;Not threadsafe.&quot;);">chunkLoadPostProcess</replaceMethod>
			<disable>processChunkGC</disable>
		</class>
	</bukkit>
	<spigot>
		<class id="org.bukkit.craftbukkit.v1_4_R1.util.WatchdogThread">
			<disable>run</disable>
		</class>
	</spigot>
	<forge>
		<class id="net.minecraftforge.common.Configuration">
			<addAll fromClass="me.nallar.patched.forge.PatchConfiguration"/>
		</class>
		<class id="net.minecraftforge.common.ConfigCategory">
			<addAll fromClass="me.nallar.patched.forge.PatchConfigCategory"/>
		</class>
		<class id="net.minecraftforge.event.Event">
			<addAll fromClass="me.nallar.patched.forge.PatchEvent"/>
		</class>
		<class id="net.minecraftforge.common.DimensionManager">
			<addAll fromClass="me.nallar.patched.forge.PatchDimensionManager"/>
			<synchronize field="unloadQueue">unloadWorld</synchronize>
			<synchronize>initDimension</synchronize>
			<insertAfter code="if ($2 != null) { $2.setDimension($1); }">setWorld</insertAfter>
		</class>
		<class id="net.minecraftforge.common.DimensionManager" env="mcpc">
			<replaceMethod code="{
				org.bukkit.Bukkit.getServer().getPluginManager().callEvent(new org.bukkit.event.world.WorldUnloadEvent($1.getWorld()));
				java.lang.reflect.Field field = org.bukkit.Bukkit.getServer().getClass().getDeclaredField(&quot;worlds&quot;);
				field.setAccessible(true);
				((java.util.Map) field.get(org.bukkit.Bukkit.getServer())).values().remove($1.getWorld());
			}
			">fireBukkitWorldUnload
			</replaceMethod>
			<removeUntilOpcode opcode="return" index="1">initDimension</removeUntilOpcode>
		</class>
		<class id="net.minecraftforge.common.ForgeChunkManager">
			<addAll fromClass="me.nallar.patched.forge.PatchForgeChunkManager"/>
			<insertAfter
							code="if ($1 != null &amp;&amp; $2 != null) { $1.world.^method:World/getChunkProvider^().^method:IChunkProvider/loadChunk^($2.^field:ChunkCoordIntPair/chunkXPos^, $2.^field:ChunkCoordIntPair/chunkZPos^); }">
				forceChunk
			</insertAfter>
			<replaceMethodCall newMethod="getChunkFromChunkCoordsWithLoad" method="^class:World^.^method:World/getChunkFromChunkCoords^">loadWorld</replaceMethodCall>
		</class>
	</forge>
	<forgeModLoader>
		<class id="cpw.mods.fml.common.registry.GameRegistry">
			<addAll fromClass="me.nallar.patched.forge.PatchGameRegistry"/>
		</class>
		<class id="cpw.mods.fml.common.registry.TickRegistry">
			<addAll fromClass="me.nallar.patched.forge.PatchTickRegistry"/>
		</class>
		<class id="cpw.mods.fml.relauncher.FMLLogFormatter">
			<replace class="me.nallar.tickthreading.LogFormatter"/>
		</class>
		<class id="cpw.mods.fml.common.event.FMLInterModComms$IMCMessage">
			<addAll fromClass="me.nallar.patched.forge.PatchIMCMessage"/>
		</class>
		<class id="cpw.mods.fml.common.Loader">
			<addAll fromClass="me.nallar.patched.forge.PatchLoader"/>
		</class>
		<class id="cpw.mods.fml.common.Loader$ModIdComparator">
			<public/>
		</class>
		<class id="cpw.mods.fml.common.asm.FMLSanityChecker">
			<replaceMethodCall code="{ $_ = null; }" method="severe">call</replaceMethodCall>
		</class>
		<class id="cpw.mods.fml.common.FMLModContainer">
			<replaceMethodCall index="0" code="{ $_ = null; }" method="log">constructMod</replaceMethodCall>
			<replaceFieldUsage field="fingerprintNotPresent" readCode="$_ = false;">constructMod</replaceFieldUsage>
			<replaceFieldUsage field="expectedFingerprint" readCode="$_ = null;">constructMod</replaceFieldUsage>
		</class>
		<class id="cpw.mods.fml.common.registry.BlockTracker">
			<synchronize>getNextBlockId,doReserveId</synchronize>
		</class>
		<class id="cpw.mods.fml.common.FMLCommonHandler">
			<addAll fromClass="me.nallar.patched.forge.PatchFMLCommonHandler"/>
			<profile>onPreServerTick,onPostServerTick,onPreWorldTick,onPostWorldTick</profile>
		</class>
		<class id="cpw.mods.fml.relauncher.RelaunchClassLoader">
			<addAll fromClass="me.nallar.patched.forge.PatchRelaunchClassLoader"/>
			<synchronize>findClass</synchronize>
		</class>
		<class id="cpw.mods.fml.common.network.PacketDispatcher">
			<addAll fromClass="me.nallar.patched.forge.PatchPacketDispatcher"/>
		</class>
		<class id="cpw.mods.fml.common.network.ModListResponsePacket">
			<replaceMethodCall index="2" code="{ $_ = null; }" method="info">execute</replaceMethodCall>
			<replaceMethodCall index="3" code="{ $_ = null; }" method="info">execute</replaceMethodCall>
		</class>
	</forgeModLoader>
	<factorization>
		<class id="factorization.common.TileEntityWrathLamp">
			<replaceInitializer field="airToUpdate" class="me.nallar.tickthreading.collections.SynchronizedPriorityQueue">^static^</replaceInitializer>
			<threadLocal field="toVisit" type="java.util.HashSet" threadLocalField="javassist.is.faulty.ThreadLocals.factorizationFindLightAirParentToVisit"/>
			<replaceMethodCall code="$_ = $0.getChunkFromBlockCoordsIfExists($$);" method="^class:World^.^method:World/getChunkFromBlockCoords^">findLightAirParent</replaceMethodCall>
		</class>
		<class id="factorization.api.Charge">
			<newField field="staticLock" class="java.lang.Object" static=""/>
			<synchronize field="staticLock">update</synchronize>
		</class>
		<class id="factorization.common.TileEntityBarrel">
			<synchronize>a(ILur;)V</synchronize>
		</class>
	</factorization>
	<liteLoader>
		<class id="com.mumfrey.liteloader.core.HookProfiler">
			<!-- LiteLoader makes the profiler not threadsafe - I may look into patching this better in future, but TT isn't really intended for clients -->
			<synchronize>a(Ljava/lang/String;)V,b()V</synchronize>
		</class>
	</liteLoader>
	<buildCraftEnergy>
		<class id="buildcraft.energy.TileEngine">
			<synchronize>createEngineIfNeeded</synchronize>
			<insertBefore code="if ($1 &gt; 2 || $1 &lt; 0) { $1 = 0; }">newEngine</insertBefore>
		</class>
	</buildCraftEnergy>
	<buildCraftFactory>
		<class id="buildcraft.BuildCraftFactory$QuarryChunkloadCallback">
			<replaceMethodCall newMethod="getTEWithLoad" method="^class:World^.^method:World/getBlockTileEntity^">ticketsLoaded(Ljava.util.List;L^class:World^;)V</replaceMethodCall>
			<replaceMethodCall newMethod="getBlockIdWithLoad" method="^class:World^.^method:World/getBlockId^">ticketsLoaded(Ljava.util.List;L^class:World^;I)Ljava.util.List;</replaceMethodCall>
		</class>
		<class id="buildcraft.factory.TilePump">
			<replaceInitializer field="blocksToPump" class="me.nallar.tickthreading.collections.TreeMapHashMap"/>
			<insertBefore code="blocksToPump.clear();">initializePumpFromPosition</insertBefore>
		</class>
	</buildCraftFactory>
	<buildCraftTransport>
		<class id="buildcraft.transport.TileGenericPipe">
			<newField field="staticLock" class="java.lang.Object" static=""/>
			<synchronize field="staticLock">initialize</synchronize>
			<synchronize field="facadeBlocks">blockCreated,getBlockId,getTile,computeConnections</synchronize>
		</class>
		<class id="buildcraft.transport.PipeTransportItems">
			<replaceInitializer field="travelingEntities" class="java.util.concurrent.ConcurrentHashMap"/>
			<replaceInitializer field="toRemove" class="me.nallar.tickthreading.collections.SynchronizedSet"/>
			<replaceMethod code="{
				synchronized(toRemove) {
					java.util.Iterator i = toRemove.iterator();
					while (i.hasNext()) {
						travelingEntities.remove(i.next());
					}
					toRemove.clear();
				}
			}">performRemoval
			</replaceMethod>
		</class>
		<class id="buildcraft.transport.PipeTransportPower">
			<!-- TODO: Non-static lock, if possible -->
			<newField field="staticLock" class="java.lang.Object" static=""/>
			<synchronize field="staticLock">updateEntity</synchronize>
		</class>
	</buildCraftTransport>
	<thermalExpansionTransport>
		<class id="thermalexpansion.transport.tileentity.TileConduitEnergy">
			<newField field="tickLock" class="java.lang.Object" static=""/>
			<synchronize field="tickLock">updateGridIfNull</synchronize>
		</class>
		<class id="thermalexpansion.transport.tileentity.TileConduitLiquid">
			<newField field="tickLock" class="java.lang.Object" static=""/>
			<synchronize field="tickLock">updateGridIfNull</synchronize>
		</class>
		<class id="thermalexpansion.transport.GridLiquid">
			<synchronize>transferLiquid,removeNode,removeConduit,setNewGrid,changeMode,increaseTracker,addNode,addConduit</synchronize>
		</class>
		<class id="thermalexpansion.transport.GridEnergy">
			<synchronize>transferEnergy,removeNode,removeConduit,setNewGrid,changeMode,increaseTracker,addNode,addConduit</synchronize>
		</class>
	</thermalExpansionTransport>
	<redPowerCore>
		<class id="com.eloraam.redpower.core.RedPowerLib">
			<threadLocal field="blockUpdates" type="java.util.HashSet" threadLocalField="javassist.is.faulty.ThreadLocals.redPowerBlockUpdateSet"/>
			<threadLocal field="powerSearchTest" type="java.util.HashSet" threadLocalField="javassist.is.faulty.ThreadLocals.redPowerPowerSearchTest"/>
			<threadLocal field="powerSearch" type="java.util.LinkedList" threadLocalField="javassist.is.faulty.ThreadLocals.redPowerPowerSearch"/>
			<threadLocalBoolean field="searching" threadLocalField="javassist.is.faulty.ThreadLocals.redPowerIsSearching"/>
		</class>
		<class id="com.eloraam.redpower.core.TileExtended">
			<replaceMethod code="this.sendTile();">updateBlock</replaceMethod>
			<replaceMethod code="this.sendTileWithNotify();">updateBlockChange</replaceMethod>
		</class>
		<class id="com.eloraam.redpower.core.TubeBuffer">
			<synchronize>onRemove,pop,addNew,addNewColor,addBounce,addAll,getLast,readFromNBT,writeToNBT</synchronize>
		</class>
		<class id="com.eloraam.redpower.core.TubeFlow">
			<replaceInitializer field="contents" class="me.nallar.tickthreading.collections.ConcurrentLinkedQueueList"/>
			<replaceInitializer field="contents" code="contents.clear(); $_ = null;">readFromNBT</replaceInitializer>
			<replaceFieldUsage field="contents" writeCode="{ }">readFromNBT</replaceFieldUsage>
			<final field="contents"/>
		</class>
		<class id="com.eloraam.redpower.core.PipeLib">
			<replaceMethodCall index="0" code="{ $_ = null; }" method="printf">registerForgeFluid</replaceMethodCall>
		</class>
	</redPowerCore>
	<redPowerMechanical>
		<class id="com.eloraam.redpower.machine.TileMotor">
			<replaceFieldUsage class="^class:World^" field="^field:World/isRemote^" writeCode="{ }" readCode="{ $_ = false; }">dropFrame,pickFrame</replaceFieldUsage>
			<replaceMethodCall newMethod="setBlockAndMetadataWithUpdateWithoutValidate" method="^class:World^.^method:World/setBlockAndMetadataWithUpdate^">dropFrame,pickFrame</replaceMethodCall>
		</class>
		<class id="com.eloraam.redpower.machine.TileTranspose">
			<synchronize field="buffer">drainBuffer</synchronize>
		</class>
	</redPowerMechanical>
	<industrialCraft>
		<class id="ic2.core.IC2">
			<synchronize>addSingleTickCallback</synchronize>
		</class>
		<class id="ic2.core.EnergyNet">
			<replaceMethodCall method="warning" code="{}">emitEnergyFrom</replaceMethodCall>
			<replaceInitializer field="energySourceToEnergyPathMap" class="java.util.HashMap"/>
			<replaceInitializer field="entityLivingToShockEnergyMap" class="java.util.HashMap"/>
			<synchronize>addTileEntity,removeTileEntity,emitEnergyFrom,discover</synchronize>
		</class>
		<class id="ic2.core.ExplosionIC2">
			<synchronize>doExplosion</synchronize>
		</class>
		<class id="ic2.core.block.wiring.TileEntityElectricBlock">
			<replaceMethodCall method="self.^method:TileEntity/onInventoryChanged^" code="{ }">^method:TileEntity/updateEntity^</replaceMethodCall>
		</class>
		<class id="ic2.core.network.NetworkManager">
			<replaceMethodCall method="cpw.mods.fml.common.network.PacketDispatcher.sendPacketToPlayer" code="javassist.is.faulty.Redirects.interceptIC2Packet($$);">
				announceBlockUpdate,initiateTileEntityEvent,initiateExplosionEffect
			</replaceMethodCall>
			<insertBefore code="javassist.is.faulty.Redirects.interceptIC2PacketIn($1, $2, $3);">onPacketData</insertBefore>
			<replaceMethod code="{
      byte[] var10000;
      try {
         java.io.ByteArrayOutputStream e = new java.io.ByteArrayOutputStream();
         e.write(0);
         java.util.zip.GZIPOutputStream gzip = new java.util.zip.GZIPOutputStream(e);
         java.io.DataOutputStream os = new java.io.DataOutputStream(gzip);
         os.writeInt(((^class:EntityPlayerMP^) $2).^field:EntityPlayerMP/playerNetServerHandler^.clientDimension);
         java.util.Iterator i$ = $1.iterator();
         int done = 0;

         do {
            ic2.core.network.NetworkManager$TileEntityField tef = (ic2.core.network.NetworkManager$TileEntityField)i$.next();
            if (!tef.te.r() &amp;&amp; tef.te.k == $2.p &amp;&amp; (tef.target == null || tef.target == $2)) {
               int distance = Math.min(Math.abs(tef.te.l - (int)$2.t), Math.abs(tef.te.n - (int)$2.v));
               if (distance &lt;= net.minecraft.server.MinecraftServer.D().ad().a() + 16) {
                  os.writeInt(tef.te.l);
                  os.writeInt(tef.te.m);
                  os.writeInt(tef.te.n);
                  os.writeShort(tef.field.length());
                  os.writeChars(tef.field);
                  java.lang.reflect.Field field = null;

                  try {
                     Class e1 = tef.te.getClass();

                     do {
                        try {
                           field = e1.getDeclaredField(tef.field);
                        } catch (NoSuchFieldException var14) {
                           e1 = e1.getSuperclass();
                        }
                     } while(field == null &amp;&amp; e1 != Object.class);

                     if (field == null) {
                        throw new NoSuchFieldException(tef.field);
                     }

                     field.setAccessible(true);
                     ic2.core.network.DataEncoder.encode(os, field.get(tef.te));
                  } catch (Exception var15) {
                     throw new RuntimeException(var15);
                  }
               }
            }
         } while (i$.hasNext() &amp;&amp; done++ &lt; 10000);
         os.close();
         gzip.close();
         return e.toByteArray();
      } catch (java.io.IOException var16) {
         throw new RuntimeException(var16);
      }
   }">getFieldData
			</replaceMethod>
			<replaceMethod code="{
				ic2.core.WorldData worldData = ic2.core.WorldData.get($1);
				Collection networkedFieldsToUpdate = worldData.networkedFieldsToUpdate;

				if (worldData.networkedFieldsToUpdate.isEmpty()) return;

				Collection networkedFieldsToUpdateList;
				synchronized(networkedFieldsToUpdate) {
				  networkedFieldsToUpdateList = new ArrayList(networkedFieldsToUpdate);
				  networkedFieldsToUpdate.clear();
				}

				for (Iterator i$ = $1.h.iterator(); i$.hasNext(); ) { Object obj = i$.next();
					iq entityPlayer = (iq)obj;

					sendUpdatePacket(networkedFieldsToUpdateList, entityPlayer);
				}
			}">sendUpdatePacket(L^class:World^;)V
			</replaceMethod>
		</class>
		<class id="ic2.core.WorldData">
			<replaceInitializer field="networkedFieldsToUpdate" class="me.nallar.tickthreading.collections.SynchronizedSet"/>
		</class>
	</industrialCraft>
	<gregTech>
		<class id="gregtechmod.GT_Mod">
			<synchronize>readIDSUData,writeIDSUData</synchronize>
			<replaceInitializer fieldClass="gregtechmod.common.tileentities.GT_TileEntity_IDSU" field="sEnergyList" class="me.nallar.tickthreading.collections.CHashMap">readIDSUData</replaceInitializer>
		</class>
		<class id="gregtechmod.common.tileentities.GT_TileEntityMetaID_Machine">
			<replaceMethodCall method="self.^method:TileEntity/onInventoryChanged^" code="{ }">^method:TileEntity/updateEntity^</replaceMethodCall>
		</class>
		<class id="gregtechmod.common.tileentities.GT_TileEntity_IDSU">
			<replaceMethodCall method="remove" code="{ $_ = null; }">setEnergyVar</replaceMethodCall>
		</class>
	</gregTech>
	<chickenChunks>
		<class id="codechicken.chunkloader.ChunkLoaderEventHandler">
			<newField field="staticLock" class="java.lang.Object" static=""/>
			<synchronize field="staticLock">tickEnd,onPlayerLogout,onWorldLoad,onWorldUnload,onChunkForce,onChunkUnForce</synchronize>
			<replaceMethod code="return java.util.EnumSet.of(cpw.mods.fml.common.TickType.SERVER, cpw.mods.fml.common.TickType.WORLD);">ticks</replaceMethod>
		</class>
		<class id="codechicken.chunkloader.PlayerChunkViewerManager">
			<synchronize field="$1.b.g">calculateChunkChanges</synchronize>
		</class>
		<class id="codechicken.chunkloader.ChunkLoaderManager">
			<disable>cleanChunks</disable>
			<replaceMethodCall newMethod="getTEWithLoad" method="^class:World^.^method:World/getBlockTileEntity^">^all^</replaceMethodCall>
			<replaceMethodCall newMethod="getBlockIdWithLoad" method="^class:World^.^method:World/getBlockId^">^all^</replaceMethodCall>
		</class>
		<class id="codechicken.chunkloader.ChunkLoaderManager$ChunkLoaderOrganiser">
			<replaceMethodCall newMethod="getTEWithLoad" method="^class:World^.^method:World/getBlockTileEntity^">^all^</replaceMethodCall>
			<replaceMethodCall newMethod="getBlockIdWithLoad" method="^class:World^.^method:World/getBlockId^">^all^</replaceMethodCall>
			<synchronize>revive(^class:World^)V</synchronize>
			<replaceInitializer field="timedUnloadQueue" class="me.nallar.tickthreading.collections.LinkedTimedHashMapQueue"/>
		</class>
		<class id="codechicken.chunkloader.CommandChunkLoaders">
			<synchronize field="codechicken.chunkloader.ChunkLoaderEventHandler.staticLock">handleCommand</synchronize>
		</class>
		<class id="codechicken.core.world.WorldExtension">
			<replaceInitializer field="chunkMap" class="me.nallar.tickthreading.collections.CHashMap"/>
		</class>
		<class id="codechicken.xycraftcopy.core.world.WorldExtension">
			<replaceInitializer field="chunkMap" class="me.nallar.tickthreading.collections.CHashMap"/>
		</class>
		<class id="codechicken.core.world.WorldExtensionManager$WorldExtensionEventHandler">
			<synchronize>onChunkLoad,onChunkUnLoad,onChunkDataLoad,onChunkDataSave</synchronize>
		</class>
		<class id="codechicken.xycraftcopy.core.world.WorldExtensionManager$WorldExtensionEventHandler">
			<synchronize>onChunkLoad,onChunkUnLoad,onChunkDataLoad,onChunkDataSave</synchronize>
		</class>
		<class id="codechicken.core.CommonUtils">
			<replaceMethod code="return $1.dimensionId;">getDimension(L^class:World^;)I</replaceMethod>
			<replaceMethod code="{
				java.io.File basesave = getWorldBaseSaveLocation($1);
				String innerSave = $1.^field:World/provider^.getSaveFolder();
				if (innerSave != null) {
					return new java.io.File(basesave, innerSave);
				}

				return basesave;
			}">getWorldSaveLocation(L^class:World^;I)Ljava.io.File;
			</replaceMethod>
		</class>
	</chickenChunks>
	<wirelessRedstone>
		<class id="codechicken.wirelessredstone.core.RedstoneEther">
			<replaceInitializer field="playerJammedMap" class="me.nallar.tickthreading.collections.CHashMap"/>
			<final field="playerJammedMap"/>
		</class>
		<class id="codechicken.wirelessredstone.core.RedstoneEtherServer">
			<synchronize>tick</synchronize>
		</class>
		<class id="codechicken.wirelessredstone.core.RedstoneEtherFrequency">
			<replaceMethodCall index="0" code="{}" method="println">updateReceiver</replaceMethodCall>
		</class>
	</wirelessRedstone>
	<myTown>
		<class id="ee.lutsu.alpha.mc.mytown.event.ProtectionEvents">
			<synchronize>tickStart</synchronize>
		</class>
	</myTown>
	<soulShards>
		<class id="com.shadwdrgn.soulshards.CommonProxy">
			<replaceMethodCall index="0" code="{}" method="println">processShard</replaceMethodCall>
		</class>
	</soulShards>
	<extraBiomesXL>
		<class id="extrabiomes.blocks.BlockAutumnLeaves$BlockType">
			<insertBefore code="if (loadedCustomBlocks) { return; }">loadCustomBlocks</insertBefore>
			<synchronize/>
		</class>
		<class id="extrabiomes.blocks.BlockGreenLeaves$BlockType">
			<insertBefore code="if (loadedCustomBlocks) { return; }">loadCustomBlocks</insertBefore>
			<synchronize/>
		</class>
		<class id="extrabiomes.module.summa.worldgen.WorldGenLegendOak$TreeBlock">
			<insertBefore code="if (loadedCustomBlocks) { return; }">loadCustomBlocks</insertBefore>
			<synchronize>loadCustomBlocks</synchronize>
		</class>
		<class id="extrabiomes.module.summa.worldgen.WorldGenFirTreeHuge$TreeBlock">
			<insertBefore code="if (loadedCustomBlocks) { return; }">loadCustomBlocks</insertBefore>
			<synchronize>loadCustomBlocks</synchronize>
		</class>
		<class id="extrabiomes.module.summa.worldgen.WorldGenFirTree$TreeBlock">
			<insertBefore code="if (loadedCustomBlocks) { return; }">loadCustomBlocks</insertBefore>
			<synchronize>loadCustomBlocks</synchronize>
		</class>
		<class id="extrabiomes.module.summa.worldgen.WorldGenAutumnTree$AutumnTreeType">
			<insertBefore code="if (loadedCustomBlocks) { return; }">loadCustomBlocks</insertBefore>
			<synchronize>loadCustomBlocks</synchronize>
		</class>
		<class id="extrabiomes.module.summa.worldgen.WorldGenAcacia$TreeBlock">
			<insertBefore code="if (loadedCustomBlocks) { return; }">loadCustomBlocks</insertBefore>
			<synchronize>loadCustomBlocks</synchronize>
		</class>
		<class id="extrabiomes.module.summa.worldgen.WorldGenRedwood$TreeBlock">
			<insertBefore code="if (loadedCustomBlocks) { return; }">loadCustomBlocks</insertBefore>
			<synchronize>loadCustomBlocks</synchronize>
		</class>
	</extraBiomesXL>
	<portalGun>
		<class id="portalgun.common.core.TickHandlerServer">
			<synchronize field="$1.e">worldTick</synchronize>
			<replaceInitializer field="grabMap" class="me.nallar.tickthreading.collections.CHashMap"/>
			<replaceInitializer field="portals" class="me.nallar.tickthreading.collections.CHashMap"/>
			<replaceInitializer field="moonPortals" class="me.nallar.tickthreading.collections.CHashMap"/>
			<replaceInitializer field="potatosProgression" class="me.nallar.tickthreading.collections.CHashMap"/>
			<replaceInitializer field="lastSeenEntity" class="me.nallar.tickthreading.collections.CHashMap"/>
			<replaceInitializer field="hasFallen" class="me.nallar.tickthreading.collections.CHashMap"/>
		</class>
		<class id="portalgun.common.core.ChunkLoadHandler">
			<replaceMethodCall newMethod="getTEWithLoad" method="^class:World^.^method:World/getBlockTileEntity^">
				ticketsLoaded(Ljava.util.List;L^class:World^;)V,ticketsLoaded(Ljava.util.List;L^class:World^;I)Ljava.util.List;
			</replaceMethodCall>
			<replaceMethodCall newMethod="getBlockIdWithLoad" method="^class:World^.^method:World/getBlockId^">
				ticketsLoaded(Ljava.util.List;L^class:World^;)V,ticketsLoaded(Ljava.util.List;L^class:World^;I)Ljava.util.List;
			</replaceMethodCall>
		</class>
	</portalGun>
	<graviGun>
		<class id="gravigun.common.core.TickHandlerServer">
			<synchronize field="$1.i">worldTick</synchronize>
			<replaceInitializer field="grabMap" class="java.util.concurrent.ConcurrentHashMap"/>
			<replaceInitializer field="tossedEntities" class="java.util.concurrent.ConcurrentHashMap"/>
			<replaceInitializer field="tosser" class="java.util.concurrent.ConcurrentHashMap"/>
			<replaceInitializer field="chargedThrow" class="java.util.concurrent.ConcurrentHashMap"/>
		</class>
	</graviGun>
	<twilightForest>
		<class id="twilightforest.TFFeatureCache">
			<synchronize>save</synchronize>
		</class>
		<class id="twilightforest.TFEventListener">
			<synchronize>worldSave</synchronize>
		</class>
		<class id="twilightforest.block.BlockTFMagicLogSpecial">
			<!-- Spams logs, slow -->
			<disable>doSortingTreeEffect</disable>
		</class>
	</twilightForest>
	<bukkitForge>
		<class id="org.bukkit.plugin.SimplePluginManager">
			<replaceMethod code="{ fireEvent($$); }">callEvent</replaceMethod>
		</class>
	</bukkitForge>
	<additionalPipes>
		<class id="buildcraft.additionalpipes.pipes.PipePowerTeleport">
			<synchronize>receiveEnergy,requestEnergy</synchronize>
		</class>
		<class id="buildcraft.additionalpipes.pipes.TeleportManager">
			<synchronize>getConnectedPipes</synchronize>
		</class>
	</additionalPipes>
	<MFFS>
		<class id="chb.mods.mffs.common.item.ItemCardPowerLink">
			<synchronize/>
		</class>
		<class id="chb.mods.mffs.common.ModularForceFieldSystem$MFFSChunkloadCallback">
			<replaceMethodCall newMethod="getTEWithLoad" method="^class:World^.^method:World/getBlockTileEntity^">
				ticketsLoaded(Ljava.util.List;L^class:World^;)V,ticketsLoaded(Ljava.util.List;L^class:World^;I)Ljava.util.List;
			</replaceMethodCall>
			<replaceMethodCall newMethod="getBlockIdWithLoad" method="^class:World^.^method:World/getBlockId^">
				ticketsLoaded(Ljava.util.List;L^class:World^;)V,ticketsLoaded(Ljava.util.List;L^class:World^;I)Ljava.util.List;
			</replaceMethodCall>
		</class>
		<class id="chb.mods.mffs.common.Linkgrid$Worldlinknet">
			<replaceInitializer field="FieldFusion" class="java.util.concurrent.ConcurrentHashMap"/>
		</class>
		<class id="chb.mods.mffs.common.tileentity.TileEntityProjector">
			<newField field="fieldInteriorMap" class="me.nallar.tickthreading.collections.CHashMapReplaceClear"/>
			<newField field="fieldDefMap" class="me.nallar.tickthreading.collections.CHashMapReplaceClear"/>
			<replaceInitializer field="field_interior" code="$_ = java.util.Collections.newSetFromMap(fieldInteriorMap);"/>
			<replaceInitializer field="field_def" code="$_ = java.util.Collections.newSetFromMap(fieldDefMap);"/>
			<replaceMethodCall method="clear" code="{ }">calculateField(Z)Z</replaceMethodCall>
			<insertBefore code="{ fieldInteriorMap.start(); fieldDefMap.start(); }">calculateField(Z)Z</insertBefore>
			<insertAfter finally="true" code="{ fieldInteriorMap.done(); fieldDefMap.done(); }">calculateField(Z)Z</insertAfter>
			<synchronize>calculateField(Z)Z</synchronize>
		</class>
	</MFFS>
	<thaumcraft>
		<class id="thaumcraft.api.ObjectTags">
			<replaceInitializer field="tags" class="me.nallar.tickthreading.collections.CHashMap"/>
		</class>
		<class id="thaumcraft.common.AuraManager">
			<synchronize>registerAuraNode</synchronize>
		</class>
		<class id="thaumcraft.common.blocks.TileCrystalCapacitor">
			<replaceFieldUsage field="count" writeCode="{ }" readCode="{ $_ = null; }">^all^</replaceFieldUsage>
			<removeField field="count"/>
			<insertAfter code="interval = new Random().nextInt(300);"/>
			<replaceMethod code="{
				^class:World^ world = this.^field:TileEntity/worldObj^;
				if (!world.onClient() &amp;&amp; interval++ % 300 == 0) {
					ArrayList e = thaumcraft.common.AuraManager.getAurasWithin(world, ^field:TileEntity/xCoord^ + 0.5, ^field:TileEntity/yCoord^ + 0.5, ^field:TileEntity/zCoord^ + 0.5);
					if(e.size() == 0) {
					   return;
					}

					Iterator i$ = e.iterator();

					while(i$.hasNext()) {
					   Integer key = (Integer)i$.next();
					   thaumcraft.api.AuraNode nd = thaumcraft.common.AuraManager.getNode(key.intValue());
					   if(nd != null) {
					      if(nd.level &gt; nd.baseLevel &amp;&amp; this.storedVis &lt; this.maxVis) {
					         thaumcraft.common.AuraManager.queueNodeChanges(nd.key, -1, 0, false, null, 0.0F, 0.0F, 0.0F);
					         ++this.storedVis;
					         sendTile();
					         break;
					      }

					      if(nd.level &lt; nd.baseLevel &amp;&amp; this.storedVis &gt; 0) {
					         thaumcraft.common.AuraManager.queueNodeChanges(nd.key, 1, 0, false, null, 0.0F, 0.0F, 0.0F);
					         --this.storedVis;
					         sendTile();
					         break;
					      }
					   }
					}
				}
			}">^method:TileEntity/updateEntity^
			</replaceMethod>
		</class>
		<class id="thaumcraft.common.blocks.TileMarker">
			<replaceInitializer field="markers" class="me.nallar.tickthreading.collections.CHashMap">^static^</replaceInitializer>
			<replaceInitializer field="markedForDeletion" class="me.nallar.tickthreading.collections.ArrayListReplaceIterateTempListClear">^static^</replaceInitializer>
		</class>
		<class id="thaumcraft.common.blocks.TileSensor">
			<replaceMethod code="((ArrayList) noteBlockEvents.get($1)).addAll($1.getNoteBlockEvents());">getNoteBlockEvents</replaceMethod>
		</class>
	</thaumcraft>
	<universalElectricity>
		<class id="universalelectricity.core.electricity.Electricity">
			<newField field="cleanNetworkCount" class="int" code="0"/>
			<newField field="readWriteLock" class="me.nallar.tickthreading.util.concurrent.TwoWayReentrantReadWriteLock"/>
			<newField field="writeLock" class="java.util.concurrent.locks.Lock" code="this.readWriteLock.writeLock();"/>
			<newField field="readLock" class="java.util.concurrent.locks.Lock" code="this.readWriteLock.readLock();"/>
			<replaceInitializer field="electricityNetworks" class="me.nallar.tickthreading.collections.LockArrayList"/>
			<insertAfter code="((me.nallar.tickthreading.collections.LockArrayList)electricityNetworks).lock = writeLock;"/>
			<lock field="readLock">unregister,cleanUpNetworks,resetConductors</lock>
			<synchronize>mergeConnection,splitConnection,cleanUpNetworks</synchronize>
			<insertBefore code="if (cleanNetworkCount++ % 15 != 0) { return; }">cleanUpNetworks</insertBefore>
		</class>
		<class id="universalelectricity.core.electricity.ElectricityConnections">
			<replaceInitializer field="connectors" class="me.nallar.tickthreading.collections.CHashMap"/>
		</class>
		<class id="universalelectricity.core.electricity.ElectricityNetwork">
			<replaceMethodCall code="$_ = $0.getTEWithoutLoad($$);" method="^class:World^.^method:World/getBlockTileEntity^">getProduced,getRequestWithoutReduction</replaceMethodCall>
			<newField field="readLock" class="java.util.concurrent.locks.Lock" code="none"/>
			<replaceMethod code="{
				me.nallar.tickthreading.util.concurrent.TwoWayReentrantReadWriteLock readWriteLock = new me.nallar.tickthreading.util.concurrent.TwoWayReentrantReadWriteLock();
				readLock = readWriteLock.readLock();
				consumers = new me.nallar.tickthreading.collections.CHashMap();
				producers = new me.nallar.tickthreading.collections.CHashMap();
				conductors = new me.nallar.tickthreading.collections.LockArrayList();
				((me.nallar.tickthreading.collections.LockArrayList)conductors).lock = readWriteLock.writeLock();
				this.addConductor($1);
			}"/>
			<lock field="readLock">addConductor,cleanConductors,setNetwork,resetConductors,onOverCharge,getTotalResistance,refreshConductors</lock>
		</class>
	</universalElectricity>
	<appliedEnergistics>
		<class id="appeng.me.basetiles.TileME">
			<newMethod code="public void ttTick() {
				Object sync = getGrid();
				if (sync != null) {
					synchronized(sync) {
						this.^method:TileEntity/updateEntity^();
					}
				} else {
					this.^method:TileEntity/updateEntity^();
				}
			}"/>
		</class>
		<class id="appeng.me.CellInventory">
			<synchronize>^all^</synchronize>
		</class>
		<class id="appeng.me.Platform">
			<synchronize>getSharedTagCompound</synchronize>
			<synchronize field="$2">addStackToList</synchronize>
			<synchronize field="$1">addStackToList</synchronize>
		</class>
		<class id="appeng.me.tile.TileController">
			<synchronize>getCellArray,resetCache,^method:TileEntity/updateEntity^,advanceCraftingCursor</synchronize>
			<replaceInitializer field="CraftingQueue" class="java.util.concurrent.ConcurrentLinkedDeque"/>
			<replaceInitializer field="WaitingQueue" class="java.util.concurrent.ConcurrentLinkedDeque"/>
		</class>
		<class id="appeng.me.tile.TileDrive">
			<synchronize>getCellArray,resetCache</synchronize>
		</class>
		<class id="appeng.me.tile.TileChest">
			<synchronize>getCellArray,resetCache</synchronize>
		</class>
		<class id="appeng.me.tile.TileStorageBus">
			<synchronize>getCellArray,resetCache,getSharedTagCompound,signalInput</synchronize>
		</class>
		<class id="appeng.me.MEInventoryArray">
			<synchronize>^all^</synchronize>
		</class>
		<class id="appeng.common.MEGridEvents">
			<replaceInitializer field="requests" class="me.nallar.tickthreading.collections.ConcurrentQueueList">^static^</replaceInitializer>
		</class>
	</appliedEnergistics>
	<xyCraft>
		<class id="soaryn.xycraft.machines.block.XyCraftWorldExtension">
			<replaceInitializer field="multiBlocks" class="me.nallar.tickthreading.collections.CHashMap"/>
			<replaceInitializer field="deferredLoadSet" class="me.nallar.tickthreading.collections.HashSetReplaceIterateTempListNoClear"/>
			<synchronize>defer,remMultiBlock</synchronize>
			<replaceFieldUsage field="useTemp" writeCode="$1 = false;">updateDeffered</replaceFieldUsage>
			<insertAfter code="deferredLoadSet.clear();">updateDeffered</insertAfter>
			<replaceMethod code="synchronized (tempList) { return this.nextMultiBlockID++; }">getNextMultiBlockID</replaceMethod>
		</class>
	</xyCraft>
	<denLib>
		<class id="denoflionsx.denLib">
			<replaceMethod code="return $1;">Hash</replaceMethod>
		</class>
	</denLib>
	<icbm>
		<class id="icbm.api.RadarRegistry">
			<replaceMethod code="detectableEntities.remove($1);">unregister(L^class:Entity^;)V</replaceMethod>
			<replaceMethod code="detectableTileEntities.remove($1);">unregister(L^class:TileEntity^;)V</replaceMethod>
			<replaceMethodCall code="$_ = $0.getTEWithoutLoad($$);" method="^class:World^.^method:World/getBlockTileEntity^">cleanUpArray</replaceMethodCall>
			<synchronize>
				cleanUpArray,getEntitiesWithinRadius,getTileEntitiesInArea,unregister(L^class:Entity^;)V,unregister(L^class:TileEntity^;)V,register(L^class:Entity^;)V,register(L^class:TileEntity^;)V
			</synchronize>
			<insertBefore code="if (!Thread.holdsLock(icbm.api.RadarRegistry.class)) { throw new UnsupportedOperationException(&quot;Not threadsafe.&quot;); }">getEntities,getTileEntities</insertBefore>
		</class>
	</icbm>
	<forestry>
		<class id="forestry.apiculture.gadgets.TileAlvearyPlain">
			<replaceInitializer field="modifiers" code="$_ = java.util.Collections.newSetFromMap(new java.util.concurrent.ConcurrentHashMap());"/>
			<replaceInitializer field="eventHandlers" code="$_ = java.util.Collections.newSetFromMap(new java.util.concurrent.ConcurrentHashMap());"/>
		</class>
	</forestry>
	<railCraft>
		<class id="railcraft.common.util.misc.ChunkManager">
			<replaceMethodCall newMethod="getTEWithLoad" method="^class:World^.^method:World/getBlockTileEntity^">
				ticketsLoaded(Ljava.util.List;L^class:World^;)V,ticketsLoaded(Ljava.util.List;L^class:World^;I)Ljava.util.List;
			</replaceMethodCall>
			<replaceMethodCall newMethod="getBlockIdWithLoad" method="^class:World^.^method:World/getBlockId^">
				ticketsLoaded(Ljava.util.List;L^class:World^;)V,ticketsLoaded(Ljava.util.List;L^class:World^;I)Ljava.util.List;
			</replaceMethodCall>
		</class>
	</railCraft>
	<seasons>
		<class id="WeatherPony.Seasons.Seasons_WorldData">
			<insertAfter code="worldsettings = new java.util.concurrent.ConcurrentHashMap();"/>
		</class>
	</seasons>
	<customOreGen>
		<class id="CustomOreGen.Server.ServerState">
			<replaceMethod code="{ return $1.isChunkSavedPopulated($2, $3); }">isChunkSavedPopulated</replaceMethod>
		</class>
	</customOreGen>
	<enderStorage>
		<class id="codechicken.enderstorage.api.EnderStorageManager">
			<insertAfter code="dirtyStorage = new me.nallar.tickthreading.collections.LinkedListReplaceIterateTempListClear();"/>
		</class>
	</enderStorage>
	<millenaire>
		<class id="org.millenaire.common.forge.Mill">
			<replaceInitializer field="serverWorlds" class="me.nallar.tickthreading.collections.CopyOnWriteVector"/>
		</class>
		<class id="org.millenaire.common.MillVillager">
			<replaceMethodCall method="error" code="{ }">registerInGlobalList</replaceMethodCall>
		</class>
		<class id="org.millenaire.common.MillWorld">
			<replaceMethod code="{ return (org.millenaire.common.Building) this.buildings.get($1);	}">getBuilding</replaceMethod>
		</class>
		<class id="org.millenaire.common.Point">
			<replaceMethod code="{
				return ((int) x) | (((int) y) &lt;&lt; 12) | (((int) z) &lt;&lt; 20);
			}">hashCode
			</replaceMethod>
		</class>
	</millenaire>
</mods>
